// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package tb_user_account

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table tb_user_account.
type Entity struct {
    Id            uint64      `orm:"id,primary"     json:"id"`             //                                                  
    UserId        int64       `orm:"user_id"        json:"user_id"`        // 所属用户                                         
    AccountSymbol string      `orm:"account_symbol" json:"account_symbol"` // 账户类型  wallet, consume, pool, digital, token  
    Currency      string      `orm:"currency"       json:"currency"`       // 币种USDT;ECUSDT;ECE;IECE                         
    Account       string      `orm:"account"        json:"account"`        // 钱包账户地址                                     
    ErcAccount    string      `orm:"erc_account"    json:"erc_account"`    // 钱包ERC账户地址                                  
    Balance       float64     `orm:"balance"        json:"balance"`        // 钱包账户余额                                     
    PriKey        string      `orm:"pri_key"        json:"pri_key"`        // 私钥                                             
    ErcPriKey     string      `orm:"erc_pri_key"    json:"erc_pri_key"`    // erc20私钥                                        
    InAmount      float64     `orm:"in_amount"      json:"in_amount"`      // 账户入账总额                                     
    OutAmount     float64     `orm:"out_amount"     json:"out_amount"`     // 账户出账总额                                     
    Status        int         `orm:"status"         json:"status"`         // 账户状态 0:冻结 1:正常                           
    UpdateTime    *gtime.Time `orm:"update_time"    json:"update_time"`    // 更新时间                                         
    CreateTime    *gtime.Time `orm:"create_time"    json:"create_time"`    // 创建时间                                         
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}