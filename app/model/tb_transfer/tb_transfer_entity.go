// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package tb_transfer

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table tb_transfer.
type Entity struct {
    Id           uint64      `orm:"id,primary"     json:"id"`             //                       
    Currency     string      `orm:"currency"       json:"currency"`       // 币种                  
    TradeLogFrom string      `orm:"trade_log_from" json:"trade_log_from"` // 转出地址              
    TradeLogTo   string      `orm:"trade_log_to"   json:"trade_log_to"`   // 转入地址              
    Fee          float64     `orm:"fee"            json:"fee"`            // 手续费                
    Amount       float64     `orm:"amount"         json:"amount"`         // 提现金额              
    Total        float64     `orm:"total"          json:"total"`          // 总额                  
    Status       string      `orm:"status"         json:"status"`         // FAIL;PROCESS;SUCCESS  
    UpdateAt     *gtime.Time `orm:"update_at"      json:"update_at"`      // 更新时间              
    CreateAt     *gtime.Time `orm:"create_at"      json:"create_at"`      // 创建时间              
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}