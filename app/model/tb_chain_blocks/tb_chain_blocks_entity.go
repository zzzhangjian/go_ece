// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package tb_chain_blocks

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table tb_chain_blocks.
type Entity struct {
    Id          uint64      `orm:"id,primary"   json:"id"`           //                       
    UserId      int64       `orm:"user_id"      json:"user_id"`      // 用户                  
    Tid         string      `orm:"tid"          json:"tid"`          // 交易号                
    Currency    string      `orm:"currency"     json:"currency"`     // 币种                  
    AddressFrom string      `orm:"address_from" json:"address_from"` // 转出地址              
    AddressTo   string      `orm:"address_to"   json:"address_to"`   // 转入地址              
    Fee         float64     `orm:"fee"          json:"fee"`          // 手续费                
    Amount      float64     `orm:"amount"       json:"amount"`       // 提现金额              
    Total       float64     `orm:"total"        json:"total"`        // 总额                  
    Type        string      `orm:"type"         json:"type"`         // USER,ADMIN            
    Status      string      `orm:"status"       json:"status"`       // FAIL;PROCESS;SUCCESS  
    Deleted     int         `orm:"deleted"      json:"deleted"`      // 是否删除              
    UpdateAt    *gtime.Time `orm:"update_at"    json:"update_at"`    // 更新时间              
    CreateAt    *gtime.Time `orm:"create_at"    json:"create_at"`    // 创建时间              
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}