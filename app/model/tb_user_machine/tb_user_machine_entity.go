// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package tb_user_machine

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table tb_user_machine.
type Entity struct {
    Id            uint64      `orm:"id,primary"     json:"id"`             //                                                   
    UserId        int64       `orm:"user_id"        json:"user_id"`        // 用户                                              
    MachineId     int         `orm:"machine_id"     json:"machine_id"`     // 矿机                                              
    Price         float64     `orm:"price"          json:"price"`          // 价格 usdt                                         
    PriceExchange float64     `orm:"price_exchange" json:"price_exchange"` // ec.usdt兑换率                                     
    Num           int         `orm:"num"            json:"num"`            // 购买数量                                          
    Amount        float64     `orm:"amount"         json:"amount"`         // 花费总金额 ec.usdt                                
    Leverage      float64     `orm:"leverage"       json:"leverage"`       // 杠杆率                                            
    ProfitTotal   float64     `orm:"profit_total"   json:"profit_total"`   // 放大权益 rmb=amount*price*exchange_rate*leverage  
    ProfitRate    float64     `orm:"profit_rate"    json:"profit_rate"`    // 每日分红比例                                      
    IsMiner       int         `orm:"is_miner"       json:"is_miner"`       // 是否已经计算权益 0:否 1:是                        
    Status        string      `orm:"status"         json:"status"`         // SUCCESS,FAIL,PROCESS                              
    CreateAt      *gtime.Time `orm:"create_at"      json:"create_at"`      //                                                   
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}