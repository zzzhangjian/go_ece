// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package tb_sweep

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table tb_sweep.
type Entity struct {
    Id             uint64      `orm:"id,primary"      json:"id"`              //                       
    Txid           string      `orm:"txid"            json:"txid"`            // 交易hash              
    BlockNumber    int64       `orm:"block_number"    json:"block_number"`    //                       
    CoinName       string      `orm:"coin_name"       json:"coin_name"`       // 币种 omni,erc20       
    CollectAddress string      `orm:"collect_address" json:"collect_address"` // 归集地址              
    FromAddress    string      `orm:"from_address"    json:"from_address"`    // 用户地址              
    Fee            float64     `orm:"fee"             json:"fee"`             // 手续费                
    Amount         float64     `orm:"amount"          json:"amount"`          // 到账金额              
    Total          float64     `orm:"total"           json:"total"`           // 总额                  
    Status         string      `orm:"status"          json:"status"`          // FAIL;PROCESS;SUCCESS  
    UpdateAt       *gtime.Time `orm:"update_at"       json:"update_at"`       //                       
    CreateAt       *gtime.Time `orm:"create_at"       json:"create_at"`       //                       
    AasmStatus     string      `orm:"aasm_status"     json:"aasm_status"`     // FAIL;PROCESS;SUCCESS  
    DoneAt         *gtime.Time `orm:"done_at"         json:"done_at"`         //                       
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}