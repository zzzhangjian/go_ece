// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package exchange_line

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table exchange_line.
type Entity struct {
    Id     int64   `orm:"id"     json:"id"`     // 主键                                                                                     
    Symbol string  `orm:"symbol" json:"symbol"` // 交易对 btcusdt, ethbtc...（取值参考GET /v1/common/symbols）                              
    Period string  `orm:"period" json:"period"` // 返回数据时间粒度，也就是每根蜡烛的时间区间                                               
    Amount float64 `orm:"amount" json:"amount"` // 以基础币种计量的交易量 1min, 5min, 15min, 30min, 60min, 4hour, 1day, 1mon, 1week, 1year  
    Count  int     `orm:"count"  json:"count"`  // 交易次数                                                                                 
    Open   float64 `orm:"open"   json:"open"`   // 本阶段开盘价                                                                             
    Close  float64 `orm:"close"  json:"close"`  // 本阶段收盘价                                                                             
    Low    float64 `orm:"low"    json:"low"`    // 本阶段最低价                                                                             
    High   float64 `orm:"high"   json:"high"`   // 本阶段最高价                                                                             
    Vol    float64 `orm:"vol"    json:"vol"`    // 以报价币种计量的交易量                                                                   
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}