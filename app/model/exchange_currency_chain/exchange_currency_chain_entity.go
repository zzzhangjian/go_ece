// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package exchange_currency_chain

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table exchange_currency_chain.
type Entity struct {
    Id                      uint64  `orm:"id,primary"                 json:"id"`                         //                                                                                                
    Chain                   string  `orm:"chain"                      json:"chain"`                      // 链名称                                                                                         
    BaseChain               string  `orm:"base_chain"                 json:"base_chain"`                 // 底层链名称                                                                                     
    BaseChainProtocol       string  `orm:"base_chain_protocol"        json:"base_chain_protocol"`        // 底层链协议                                                                                     
    IsDynamic               int     `orm:"is_dynamic"                 json:"is_dynamic"`                 // 否动态手续费（仅对固定类型有效，withdrawFeeType=fixed）	true,false                              
    NumOfConfirmations      int     `orm:"num_of_confirmations"       json:"num_of_confirmations"`       // 安全上账所需确认次数（达到确认次数后允许提币）                                                 
    NumOfFastConfirmations  int     `orm:"num_of_fast_confirmations"  json:"num_of_fast_confirmations"`  // 快速上账所需确认次数（达到确认次数后允许交易但不允许提币）                                     
    MinDepositAmt           float64 `orm:"min_deposit_amt"            json:"min_deposit_amt"`            // 单次最小充币金额                                                                               
    DepositStatus           string  `orm:"deposit_status"             json:"deposit_status"`             // 充币状态 allowed,prohibited                                                                    
    MinWithdrawAmt          float64 `orm:"min_withdraw_amt"           json:"min_withdraw_amt"`           // 单次最小提币金额                                                                               
    MaxWithdrawAmt          float64 `orm:"max_withdraw_amt"           json:"max_withdraw_amt"`           // 单次最大提币金额                                                                               
    WithdrawQuotaPerDay     float64 `orm:"withdraw_quota_per_day"     json:"withdraw_quota_per_day"`     // 当日提币额度（新加坡时区）                                                                     
    WithdrawQuotaPerYear    float64 `orm:"withdraw_quota_per_year"    json:"withdraw_quota_per_year"`    // 当年提币额度                                                                                   
    WithdrawQuotaTotal      float64 `orm:"withdraw_quota_total"       json:"withdraw_quota_total"`       // 总提币额度                                                                                     
    WithdrawPrecision       int     `orm:"withdraw_precision"         json:"withdraw_precision"`         // 提币精度                                                                                       
    WithdrawFeeType         string  `orm:"withdraw_fee_type"          json:"withdraw_fee_type"`          // 提币手续费类型（特定币种在特定链上的提币手续费类型唯一）	fixed,circulated,ratio                 
    TransactFeeWithdraw     float64 `orm:"transact_fee_withdraw"      json:"transact_fee_withdraw"`      // 单次提币手续费（仅对固定类型有效，withdrawFeeType=fixed）                                      
    MinTransactFeeWithdraw  float64 `orm:"min_transact_fee_withdraw"  json:"min_transact_fee_withdraw"`  // 最小单次提币手续费（仅对区间类型和有下限的比例类型有效，withdrawFeeType=circulated or ratio）  
    MaxTransactFeeWithdraw  float64 `orm:"max_transact_fee_withdraw"  json:"max_transact_fee_withdraw"`  // 最大单次提币手续费（仅对区间类型和有上限的比例类型有效，withdrawFeeType=circulated or ratio）  
    TransactFeeRateWithdraw float64 `orm:"transact_fee_rate_withdraw" json:"transact_fee_rate_withdraw"` // 单次提币手续费率（仅对比例类型有效，withdrawFeeType=ratio）                                    
    WithdrawStatus          string  `orm:"withdraw_status"            json:"withdraw_status"`            // 提币状态	allowed,prohibited                                                                     
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}