// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package tb_user

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table tb_user.
type Entity struct {
    UserId           uint64      `orm:"user_id,primary"    json:"user_id"`           // 用户ID         
    Username         string      `orm:"username"           json:"username"`          // 用户名         
    Mobile           string      `orm:"mobile,unique"      json:"mobile"`            // 手机号         
    InviteCode       string      `orm:"invite_code,unique" json:"invite_code"`       // 邀请码         
    UserParentId     int64       `orm:"user_parent_id"     json:"user_parent_id"`    // 推荐人         
    Email            string      `orm:"email"              json:"email"`             // 邮箱           
    GradeId          int         `orm:"grade_id"           json:"grade_id"`          // 用户级别 外键  
    Salt             string      `orm:"salt"               json:"salt"`              // 密码加盐       
    Password         string      `orm:"password"           json:"password"`          // 密码           
    SecurityPassword string      `orm:"security_password"  json:"security_password"` // 资金密码       
    Avatar           string      `orm:"avatar"             json:"avatar"`            // 头像           
    ProfitTotal      float64     `orm:"profit_total"       json:"profit_total"`      // 总权益         
    CreateTime       *gtime.Time `orm:"create_time"        json:"create_time"`       // 创建时间       
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}