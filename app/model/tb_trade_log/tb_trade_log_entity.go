// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package tb_trade_log

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table tb_trade_log.
type Entity struct {
    Id            string      `orm:"id,primary"      json:"id"`              // 交易序号                                               
    UserId        int64       `orm:"user_id"         json:"user_id"`         // 用户                                                   
    UserAccountId int64       `orm:"user_account_id" json:"user_account_id"` // 入账账户ID                                             
    AccountSymbol string      `orm:"account_symbol"  json:"account_symbol"`  // 账户类型  wallet, consume, pool, digital, token        
    Currency      string      `orm:"currency"        json:"currency"`        // USDT,ECUSDT,ECE,IECE                                   
    Fee           float64     `orm:"fee"             json:"fee"`             // 交易手续费                                             
    Amount        float64     `orm:"amount"          json:"amount"`          // 交易金额                                               
    Total         float64     `orm:"total"           json:"total"`           // 交易总额 = 交易金额 + 手续费                           
    TotalAfter    float64     `orm:"total_after"     json:"total_after"`     // 交易后金额=交易前+交易金额                             
    TradeType     string      `orm:"trade_type"      json:"trade_type"`      // 交易类型withdraw,deposit,profit,transfer,exchange,buy  
    ProfitType    string      `orm:"profit_type"     json:"profit_type"`     // machine,block,manage,fans,achievement,recommend        
    SourceId      string      `orm:"source_id"       json:"source_id"`       // 源ID                                                   
    TradeStatus   string      `orm:"trade_status"    json:"trade_status"`    // FAIL,PROCESS,SUCCESS                                   
    Bound         string      `orm:"bound"           json:"bound"`           // in_bount,out_bound                                     
    UpdateAt      *gtime.Time `orm:"update_at"       json:"update_at"`       //                                                        
    CreateAt      *gtime.Time `orm:"create_at"       json:"create_at"`       //                                                        
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}