// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package exchange_symbol

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table exchange_symbol.
type Entity struct {
    Id              uint64  `orm:"id,primary"       json:"id"`               //                                                                                                                                  
    BaseCurrency    string  `orm:"base_currency"    json:"base_currency"`    // 交易对中的基础币种                                                                                                               
    QuoteCurrency   string  `orm:"quote_currency"   json:"quote_currency"`   // 交易对中的报价币种                                                                                                               
    PricePrecision  int     `orm:"price_precision"  json:"price_precision"`  // 交易对报价的精度（小数点后位数）                                                                                                 
    AmountPrecision string  `orm:"amount_precision" json:"amount_precision"` // 交易对基础币种计数精度（小数点后位数）                                                                                           
    SymbolPartition string  `orm:"symbol_partition" json:"symbol_partition"` // 交易区，可能值: [main，innovation]                                                                                               
    Symbol          string  `orm:"symbol,unique"    json:"symbol"`           // 交易对                                                                                                                           
    State           string  `orm:"state"            json:"state"`            // 交易对状态；可能值: [online，offline,suspend] online - 已上线；offline - 交易对已下线，不可交易；suspend -- 交易暂停             
    ValuePrecision  int     `orm:"value_precision"  json:"value_precision"`  // 交易对交易金额的精度（小数点后位数）                                                                                             
    MinOrderAmt     float64 `orm:"min_order_amt"    json:"min_order_amt"`    // 交易对最小下单量 (下单量指当订单类型为限价单或sell-market时，下单接口传的'amount')                                               
    MaxOrderAmt     float64 `orm:"max_order_amt"    json:"max_order_amt"`    // 交易对最大下单量                                                                                                                 
    MinOrderValue   float64 `orm:"min_order_value"  json:"min_order_value"`  // 最小下单金额 （下单金额指当订单类型为限价单时，下单接口传入的(amount * price)。当订单类型为buy-market时，下单接口传的'amount'）  
    LeverageRatio   float64 `orm:"leverage_ratio"   json:"leverage_ratio"`   // 交易对杠杆最大倍数                                                                                                               
    Flag            int     `orm:"flag"             json:"flag"`             // 标签位，用于推荐，排序等,默认为0，1表示推荐，                                                                                    
    Sorted          int     `orm:"sorted"           json:"sorted"`           // 排序                                                                                                                             
    Enable          int     `orm:"enable"           json:"enable"`           // 状态，1：启用，0：禁止                                                                                                           
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}